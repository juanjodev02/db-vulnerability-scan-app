import {
  Heading,
  FormControl,
  FormLabel,
  Select,
  Flex,
  Skeleton,
  Button,
  TableContainer,
  Table,
  Thead,
  Tr,
  Th,
  Tbody,
  Td,
  Code,
  Box,
  Accordion,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Text,
} from '@chakra-ui/react'

import { Hero } from '../components/Hero'
import { Container } from '../components/Container'
import { DarkModeSwitch } from '../components/DarkModeSwitch'
import { useMutation, useQuery } from 'react-query'
import { useState } from 'react'
import { DownloadIcon } from '@chakra-ui/icons'

type Database = {
  id: number,
  name: string,
}

type Relation = {
  originTable: string,
  destinationTable: string,
  name: string,
}

type Anomaly = {
  relation: Relation,
  description: string,
}

type Trigger = {
  table: string,
  actions: string[], // ['INSERT', 'UPDATE', 'DELETE']
}

type AnalysisResult = {
  tables: string[],
  relations: Relation[]
  anomalies: Anomaly[]
  triggers: Trigger[]
}

const Index = () => {
  const [databaseId, setDatabaseId] = useState<number>();

  const {data: databases = [], isLoading: databasesIsLoading, refetch} = useQuery('databases', (): Promise<Database[]> => {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve([
          {id: 1, name: 'MySQL'},
          {id: 2, name: 'PostgreSQL'},
          {id: 3, name: 'MongoDB'},
        ])
      }, 1000);
    })
  })

  const {mutate: analysisMutation, isLoading: analysisMutationIsLoading, data: analysisMutationData, reset} = useMutation((databaseId: number): Promise<AnalysisResult> => {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          tables: ['table_1', 'table_2', 'table_3'],
          relations: [
            {originTable: 'table_1', destinationTable: 'table_2', name: 'table_1_table_2'},
            {originTable: 'table_1', destinationTable: 'table_3', name: 'table_1_table_3'},
            {originTable: 'table_2', destinationTable: 'table_3', name: 'table_2_table_3'},
          ],
          anomalies: [
            {relation: {originTable: 'table_1', destinationTable: 'table_2', name: 'table_1_table_2'}, description: 'Anomaly 1'},
            {relation: {originTable: 'table_1', destinationTable: 'table_3', name: 'table_1_table_3'}, description: 'Anomaly 2'},
            {relation: {originTable: 'table_2', destinationTable: 'table_3', name: 'table_2_table_3'}, description: 'Anomaly 3'},
          ],
          triggers: [
            {table: 'table_1', actions: ['INSERT', 'UPDATE', 'DELETE']},
            {table: 'table_2', actions: ['INSERT', 'UPDATE', 'DELETE']},
            {table: 'table_3', actions: ['INSERT', 'UPDATE', 'DELETE']},
          ],
        })
      } , 1000);
    })
  })

  const onChange = (e: any) => {
    const { value } = e.target;
    if (!value) {
      onClear();
    }

    if (value && value !== databaseId) {
      onClear();
      setDatabaseId(value);
    }
  }

  const onClear = () => {
    setDatabaseId(undefined);
    refetch();
    reset();
  }
  return (
    <Container minH="100vh">
      <Hero />
      <Heading as='h3' size='lg'>
        Base de datos
      </Heading>
        <Flex direction="column" my="2em">
          <FormControl>
            <FormLabel>Seleccione una base de datos para continuar</FormLabel>
            <Skeleton isLoaded={!databasesIsLoading}>
              <Select onChange={onChange} placeholder='Seleccione la base de datos'>
                {databases?.map(({id, name}: Database) => (
                  <option key={id} value={id}>{name}</option>
                ))}
              </Select>
            </Skeleton>
          </FormControl>
        </Flex>
        {
          databaseId &&
          <>
            <Flex>
              <Button isLoading={analysisMutationIsLoading} onClick={() => analysisMutation(databaseId)}>Continuar</Button>
            </Flex>
            {
              analysisMutationData && (
                <Flex my='2em' maxW='xl' w="100%" direction="column">
                  <Box display="flex" justifyContent="space-between" alignItems="center">
                    <Heading as='h3' size='lg'>
                      Resultados
                    </Heading>
                    <Button onClick={onClear} colorScheme='red' variant='outline'>Limpiar resultados</Button>
                  </Box>
                  <Accordion allowMultiple my='2em'>
                    <AccordionItem>
                      <AccordionButton display="flex" justifyContent="space-between" alignItems="center">
                        <Heading as='h3' size='sm' my="1em">
                          Tablas
                        </Heading>
                        <AccordionIcon />
                      </AccordionButton>
                      <AccordionPanel>
                        <Box  borderWidth='1px' borderRadius='lg' overflow='hidden'>
                          <TableContainer>
                            <Table variant="striped">
                              <Thead>
                                <Tr>
                                  <Th>Nombre de tabla</Th>
                                </Tr>
                              </Thead>
                              <Tbody>
                                {analysisMutationData.tables.map(table => (
                                  <Tr key={table}>
                                    <Td>
                                      <Code>
                                        {table}
                                      </Code>
                                    </Td>
                                  </Tr>
                                ))}
                              </Tbody>
                            </Table>
                          </TableContainer>
                        </Box>
                      </AccordionPanel>
                    </AccordionItem>
                    <AccordionItem>
                      <AccordionButton display="flex" justifyContent="space-between" alignItems="center">
                        <Heading as='h3' size='sm' my="1em">
                          Relaciones
                        </Heading>
                        <AccordionIcon />
                      </AccordionButton>
                      <AccordionPanel>
                        <Box  borderWidth='1px' borderRadius='lg' overflow='hidden'>
                          <TableContainer>
                            <Table variant="striped">
                              <Thead>
                                <Tr>
                                  <Th>Origen</Th>
                                  <Th>Destino</Th>
                                  <Th>Nombre</Th>
                                </Tr>
                              </Thead>
                              <Tbody>
                                {analysisMutationData.relations.map(relation => (
                                  <Tr key={relation.name}>
                                    <Td>
                                      <Code>
                                        {relation.originTable}
                                      </Code>
                                    </Td>
                                    <Td>
                                      <Code>
                                        {relation.destinationTable}
                                      </Code>
                                    </Td>
                                    <Td>
                                      <Code>
                                        {relation.name}
                                      </Code>
                                    </Td>
                                  </Tr>
                                ))}
                              </Tbody>
                            </Table>
                          </TableContainer>
                        </Box>
                      </AccordionPanel>
                    </AccordionItem>
                    <AccordionItem>
                      <AccordionButton display="flex" justifyContent="space-between" alignItems="center">
                        <Heading as='h3' size='sm' my="1em">
                          Anomalías
                        </Heading>
                        <AccordionIcon />
                      </AccordionButton>
                      <AccordionPanel>
                        <Box  borderWidth='1px' borderRadius='lg' overflow='hidden'>
                          <TableContainer>
                            <Table variant="striped">
                              <Thead>
                                <Tr>
                                  <Th>Relación</Th>
                                  <Th>Descripción</Th>
                                </Tr>
                              </Thead>
                              <Tbody>
                                {analysisMutationData.anomalies.map(anomaly => (
                                  <Tr key={anomaly.description}>
                                    <Td>
                                      <Code>
                                        {anomaly.relation.name}
                                      </Code>
                                    </Td>
                                    <Td>
                                      <Text>
                                        {anomaly.description}
                                      </Text>
                                    </Td>
                                  </Tr>
                                ))}
                              </Tbody>
                            </Table>
                          </TableContainer>
                        </Box>
                      </AccordionPanel>
                    </AccordionItem>

                    <AccordionItem>
                      <AccordionButton display="flex" justifyContent="space-between" alignItems="center">
                        <Heading as='h3' size='sm' my="1em">
                          Triggers
                        </Heading>
                        <AccordionIcon />
                      </AccordionButton>
                      <AccordionPanel>
                        <Box  borderWidth='1px' borderRadius='lg' overflow='hidden'>
                          <TableContainer>
                            <Table variant="striped">
                              <Thead>
                                <Tr>
                                  <Th>Tabla</Th>
                                  <Th>Acciones</Th>
                                </Tr>
                              </Thead>
                              <Tbody>
                                {analysisMutationData.triggers.map(trigger => (
                                  <Tr key={trigger.table}>
                                    <Td>
                                      <Code>
                                        {trigger.table}
                                      </Code>
                                    </Td>
                                    <Td>
                                      <Box display="flex" gap="1em">
                                        {trigger.actions.map(action => (
                                          <Code>
                                            {action}
                                          </Code>
                                        ))}
                                      </Box>
                                    </Td>
                                  </Tr>
                                ))}
                              </Tbody>
                            </Table>
                          </TableContainer>
                        </Box>
                      </AccordionPanel>
                    </AccordionItem>
                  </Accordion>
                  <Button colorScheme='green' rightIcon={<DownloadIcon />}>Descargar log</Button>
                </Flex>
              )
            }
          </>
        }
      <DarkModeSwitch />
    </Container>
  )
}

export default Index
